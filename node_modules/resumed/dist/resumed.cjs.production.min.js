"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs"),o=require("colorette"),r=require("sade"),t=require("path"),a=require("escalade"),n=require("globby"),s=require("lodash.uniqby"),i=require("resume-schema"),l=require("util");function u(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var d=u(r),m=u(t),c=u(a),p=u(n),h=u(s),w=u(i);const f=require("../package.json"),y=d.default(f.name).version(f.version);y.command("render [filename]","Render resume",{alias:"export",default:!0}).option("-o, --output","Output filename","resume.html").option("-t, --theme","Theme to use, if more than one is installed").action((async(r="resume.json",{output:t,theme:a})=>{const n=JSON.parse(await e.promises.readFile(r,"utf-8")),[s,...i]=await j(a);if(null==s)return console.log(`Could not find a JSON Resume theme to render. Try installing one (e.g. ${o.yellow("npm i jsonresume-theme-even")}) and run the command again. 😉`),void(process.exitCode=1);i.length>0&&console.log(`Found ${i.length+1} JSON Resume themes installed, defaulting to ${o.yellow(s.name)}. Pass the ${o.yellow("--theme")} option if you would like to use another one.`);const l=await q(n,s.module);await e.promises.writeFile(t,l),console.log(`You can find your rendered resume at ${o.yellow(t)}. Nice work! 🚀`)})),y.command("init [filename]","Create sample resume",{alias:"create"}).action((async(e="resume.json")=>{await g(e),console.log(`Done! Start editing ${o.yellow(e)} now, and run the ${o.yellow("render")} command when you are ready. 👍`)})),y.command("validate [filename]","Validate resume").action((async(e="resume.json")=>{try{await x(e),console.log(`Your ${o.yellow(e)} looks amazing! ✨`)}catch(r){if(!Array.isArray(r))throw r;console.log(`Uh-oh! The following errors were found in ${o.yellow(e)}:\n`),r.forEach((e=>console.log(` ${o.red(`❌ ${e.message}`)} at ${o.yellow(e.path)}.`))),process.exitCode=1}}));const g=o=>{const r=require("resume-schema/sample.resume.json");return e.promises.writeFile(o,JSON.stringify(r,void 0,2))},$=async o=>{try{return(await e.promises.stat(o)).isDirectory()}catch{return!1}},j=async e=>{const o=await c.default(process.cwd(),((e,o)=>o.includes("node_modules")&&"."));if(!o)throw new Error("node_modules directory not found");const r=m.default.resolve(o,"node_modules");if(!await $(r)&&!await $(o))throw new Error(`${o} does not exist or is not a directory`);const t=(await(async(e="*",o)=>(await p.default([`jsonresume-theme-${e}/package.json`,`@*/jsonresume-theme-${e}/package.json`,`@jsonresume/theme-${e}/package.json`],{cwd:o,expandDirectories:!1})).map(m.default.dirname))(e,r)).map((e=>({name:e.split("-").pop(),path:require.resolve(e,{paths:[o]})})));return h.default(t,"path").map((e=>({...e,module:require(e.path)})))},q=(e,o)=>o.render(e),v=l.promisify(w.default.validate),x=async o=>{const r=await e.promises.readFile(o,"utf-8");return v(JSON.parse(r))};exports.cli=y,exports.init=g,exports.loadThemes=j,exports.render=q,exports.validate=x;
//# sourceMappingURL=resumed.cjs.production.min.js.map
