{"version":3,"file":"resumed.cjs.production.min.js","sources":["../src/cli.ts","../src/init.ts","../src/load-themes.ts","../src/render.ts","../src/validate.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { promises as fs } from 'fs'\nimport { red, yellow } from 'colorette'\nimport sade from 'sade'\nimport { init, loadThemes, render, validate } from '.'\n\nconst pkg = require('../package.json')\n\ntype RenderOptions = {\n  output: string\n  theme?: string\n}\n\nexport const cli = sade(pkg.name).version(pkg.version)\n\ncli\n  .command('render [filename]', 'Render resume', {\n    alias: 'export',\n    default: true,\n  })\n  .option('-o, --output', 'Output filename', 'resume.html')\n  .option('-t, --theme', 'Theme to use, if more than one is installed')\n  .action(\n    async (\n      filename: string = 'resume.json',\n      { output, theme }: RenderOptions,\n    ) => {\n      const resume = JSON.parse(await fs.readFile(filename, 'utf-8'))\n      const [loadedTheme, ...otherLoadedThemes] = await loadThemes(theme)\n\n      if (loadedTheme == null) {\n        console.log(\n          `Could not find a JSON Resume theme to render. Try installing one (e.g. ${yellow(\n            'npm i jsonresume-theme-even',\n          )}) and run the command again. 😉`,\n        )\n\n        process.exitCode = 1\n        return\n      }\n\n      if (otherLoadedThemes.length > 0) {\n        console.log(\n          `Found ${\n            otherLoadedThemes.length + 1\n          } JSON Resume themes installed, defaulting to ${yellow(\n            loadedTheme.name,\n          )}. Pass the ${yellow(\n            '--theme',\n          )} option if you would like to use another one.`,\n        )\n      }\n\n      const rendered = await render(resume, loadedTheme.module)\n      await fs.writeFile(output, rendered)\n\n      console.log(\n        `You can find your rendered resume at ${yellow(output)}. Nice work! 🚀`,\n      )\n    },\n  )\n\ncli\n  .command('init [filename]', 'Create sample resume', { alias: 'create' })\n  .action(async (filename: string = 'resume.json') => {\n    await init(filename)\n    console.log(\n      `Done! Start editing ${yellow(filename)} now, and run the ${yellow(\n        'render',\n      )} command when you are ready. 👍`,\n    )\n  })\n\ncli\n  .command('validate [filename]', 'Validate resume')\n  .action(async (filename: string = 'resume.json') => {\n    try {\n      await validate(filename)\n      console.log(`Your ${yellow(filename)} looks amazing! ✨`)\n    } catch (err) {\n      if (!Array.isArray(err)) {\n        throw err\n      }\n\n      console.log(\n        `Uh-oh! The following errors were found in ${yellow(filename)}:\\n`,\n      )\n      err.forEach((err: { message: string; path: string }) =>\n        console.log(` ${red(`❌ ${err.message}`)} at ${yellow(err.path)}.`),\n      )\n\n      process.exitCode = 1\n    }\n  })\n","import { promises as fs } from 'fs'\n\nexport const init = (filename: string) => {\n  const resume = require('resume-schema/sample.resume.json')\n  return fs.writeFile(filename, JSON.stringify(resume, undefined, 2))\n}\n","// Based on https://github.com/prettier/prettier/blob/master/src/common/load-plugins.js\nimport { promises as fs } from 'fs'\nimport path from 'path'\nimport escalade from 'escalade'\nimport globby from 'globby'\nimport uniqBy from 'lodash.uniqby'\n\nconst isDir = async (dir: string) => {\n  try {\n    return (await fs.stat(dir)).isDirectory()\n  } catch {\n    return false\n  }\n}\n\nconst findThemesInNodeModules = async (theme = '*', nodeModulesDir: string) =>\n  (\n    await globby(\n      [\n        `jsonresume-theme-${theme}/package.json`,\n        `@*/jsonresume-theme-${theme}/package.json`,\n        `@jsonresume/theme-${theme}/package.json`,\n      ],\n      { cwd: nodeModulesDir, expandDirectories: false },\n    )\n  ).map(path.dirname)\n\nexport const loadThemes = async (theme?: string) => {\n  const themeSearchDir = await escalade(\n    process.cwd(),\n    (_dir, names) => names.includes('node_modules') && '.',\n  )\n\n  if (!themeSearchDir) {\n    throw new Error('node_modules directory not found')\n  }\n\n  const nodeModulesDir = path.resolve(themeSearchDir, 'node_modules')\n\n  // In some fringe cases (e.g. files \"mounted\" as virtual directories),\n  // the isDir(themeSearchDir) check might be false even though node_modules\n  // actually exists.\n  if (!(await isDir(nodeModulesDir)) && !(await isDir(themeSearchDir))) {\n    throw new Error(`${themeSearchDir} does not exist or is not a directory`)\n  }\n\n  const themesInfo = (await findThemesInNodeModules(theme, nodeModulesDir)).map(\n    name => ({\n      name: name.split('-').pop()!,\n      path: require.resolve(name, { paths: [themeSearchDir] }),\n    }),\n  )\n\n  return uniqBy(themesInfo, 'path').map(info => ({\n    ...info,\n    module: require(info.path),\n  }))\n}\n","type Theme<T> = {\n  render: (resume: object) => T | Promise<T>\n}\n\nexport const render = (resume: object, theme: Theme<string>) =>\n  theme.render(resume)\n","import { promises as fs } from 'fs'\nimport schema from 'resume-schema'\nimport { promisify } from 'util'\n\nconst schemaValidate = promisify(schema.validate)\n\nexport const validate = async (filename: string) => {\n  const resume = await fs.readFile(filename, 'utf-8')\n  return schemaValidate(JSON.parse(resume))\n}\n"],"names":["pkg","require","cli","sade","name","version","command","alias","default","option","action","async","filename","output","theme","resume","JSON","parse","fs","promises","readFile","loadedTheme","otherLoadedThemes","loadThemes","console","log","yellow","process","exitCode","length","rendered","render","module","writeFile","init","validate","err","Array","isArray","forEach","red","message","path","stringify","undefined","isDir","stat","dir","isDirectory","themeSearchDir","escalade","cwd","_dir","names","includes","Error","nodeModulesDir","resolve","themesInfo","globby","expandDirectories","map","dirname","findThemesInNodeModules","split","pop","paths","uniqBy","info","schemaValidate","promisify","schema"],"mappings":"2XAMA,MAAMA,EAAMC,QAAQ,mBAOPC,EAAMC,EAAI,QAACH,EAAII,MAAMC,QAAQL,EAAIK,SAE9CH,EACGI,QAAQ,oBAAqB,gBAAiB,CAC7CC,MAAO,SACPC,SAAS,IAEVC,OAAO,eAAgB,kBAAmB,eAC1CA,OAAO,cAAe,+CACtBC,QACCC,MACEC,EAAmB,eACjBC,OAAAA,EAAQC,MAAAA,MAEV,MAAMC,EAASC,KAAKC,YAAYC,EAAEC,SAACC,SAASR,EAAU,WAC/CS,KAAgBC,SAA2BC,EAAWT,GAEzDO,GAAe,MAAfA,EAQF,OAPAG,QAAQC,IACoE,0EAAAC,EAAMA,OAC9E,sEAIJC,QAAQC,SAAW,GAIjBN,EAAkBO,OAAS,GAC7BL,QAAQC,IACN,SACEH,EAAkBO,OAAS,iDACmBH,EAAAA,OAC9CL,EAAYjB,mBACCsB,EAAAA,OACb,2DAKAI,MAAAA,QAAiBC,EAAOhB,EAAQM,EAAYW,cAC5Cd,WAAGe,UAAUpB,EAAQiB,GAE3BN,QAAQC,IACkC,wCAAAC,EAAMA,OAACb,wBAKvDX,EACGI,QAAQ,kBAAmB,uBAAwB,CAAEC,MAAO,WAC5DG,QAAOC,MAAOC,EAAmB,uBAC1BsB,EAAKtB,GACXY,QAAQC,IACN,uBAAuBC,EAAMA,OAACd,uBAA8Bc,SAC1D,+CAKRxB,EACGI,QAAQ,sBAAuB,mBAC/BI,QAAOC,MAAOC,EAAmB,iBAC5B,UACIuB,EAASvB,GACfY,QAAQC,IAAY,QAAAC,EAAMA,OAACd,uBAC3B,MAAOwB,GACP,IAAKC,MAAMC,QAAQF,GACjB,MAAMA,EAGRZ,QAAQC,IACuC,6CAAAC,EAAMA,OAACd,SAEtDwB,EAAIG,SAASH,GACXZ,QAAQC,QAAQe,MAAS,KAAAJ,EAAIK,iBAAiBf,EAAMA,OAACU,EAAIM,YAG3Df,QAAQC,SAAW,MCzFZM,MAAAA,EAAQtB,IACnB,MAAMG,EAASd,QAAQ,oCACvB,OAAOiB,EAAEC,SAACc,UAAUrB,EAAUI,KAAK2B,UAAU5B,OAAQ6B,EAAW,KCG5DC,EAAQlC,MAAAA,IACR,IACK,aAAOO,EAAAA,SAAG4B,KAAKC,IAAMC,cAC5B,MACA,OAAO,IAgBEzB,EAAaZ,MAAAA,IAClBsC,MAAAA,QAAuBC,EAAAA,QAC3BvB,QAAQwB,OACR,CAACC,EAAMC,IAAUA,EAAMC,SAAS,iBAAmB,MAGjD,IAACL,EACH,MAAM,IAAIM,MAAM,oCAGZC,MAAAA,EAAiBd,EAAI,QAACe,QAAQR,EAAgB,gBAKpD,UAAYJ,EAAMW,WAA4BX,EAAMI,GAClD,MAAM,IAAIM,SAASN,0CAGrB,MAAMS,QA/BwB/C,OAAOG,EAAQ,IAAK0C,WAE1CG,EAAM,QACV,CACE,oBAAoB7C,iBACpB,uBAAuBA,iBACvB,qBAAqBA,kBAEvB,CAAEqC,IAAKK,EAAgBI,mBAAmB,KAE5CC,IAAInB,UAAKoB,SAqBeC,CAAwBjD,EAAO0C,IAAiBK,KACxEzD,IAAS,CACPA,KAAMA,EAAK4D,MAAM,KAAKC,MACtBvB,KAAMzC,QAAQwD,QAAQrD,EAAM,CAAE8D,MAAO,CAACjB,SAI1C,OAAOkB,EAAAA,QAAOT,EAAY,QAAQG,KAAIO,IAAS,IAC1CA,EACHpC,OAAQ/B,QAAQmE,EAAK1B,WCnDZX,EAAS,CAAChB,EAAgBD,IACrCA,EAAMiB,OAAOhB,GCDTsD,EAAiBC,EAASA,UAACC,UAAOpC,UAE3BA,EAAWxB,MAAAA,IAChBI,MAAAA,QAAeG,EAAEC,SAACC,SAASR,EAAU,SACpCyD,OAAAA,EAAerD,KAAKC,MAAMF"}