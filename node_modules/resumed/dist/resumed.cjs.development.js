'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var colorette = require('colorette');
var sade = require('sade');
var path = require('path');
var escalade = require('escalade');
var globby = require('globby');
var uniqBy = require('lodash.uniqby');
var schema = require('resume-schema');
var util = require('util');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var sade__default = /*#__PURE__*/_interopDefaultLegacy(sade);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var escalade__default = /*#__PURE__*/_interopDefaultLegacy(escalade);
var globby__default = /*#__PURE__*/_interopDefaultLegacy(globby);
var uniqBy__default = /*#__PURE__*/_interopDefaultLegacy(uniqBy);
var schema__default = /*#__PURE__*/_interopDefaultLegacy(schema);

const pkg = /*#__PURE__*/require('../package.json');

const cli = /*#__PURE__*/sade__default["default"](pkg.name).version(pkg.version);
cli.command('render [filename]', 'Render resume', {
  alias: 'export',
  default: true
}).option('-o, --output', 'Output filename', 'resume.html').option('-t, --theme', 'Theme to use, if more than one is installed').action(async (filename = 'resume.json', {
  output,
  theme
}) => {
  const resume = JSON.parse(await fs.promises.readFile(filename, 'utf-8'));
  const [loadedTheme, ...otherLoadedThemes] = await loadThemes(theme);

  if (loadedTheme == null) {
    console.log(`Could not find a JSON Resume theme to render. Try installing one (e.g. ${colorette.yellow('npm i jsonresume-theme-even')}) and run the command again. 😉`);
    process.exitCode = 1;
    return;
  }

  if (otherLoadedThemes.length > 0) {
    console.log(`Found ${otherLoadedThemes.length + 1} JSON Resume themes installed, defaulting to ${colorette.yellow(loadedTheme.name)}. Pass the ${colorette.yellow('--theme')} option if you would like to use another one.`);
  }

  const rendered = await render(resume, loadedTheme.module);
  await fs.promises.writeFile(output, rendered);
  console.log(`You can find your rendered resume at ${colorette.yellow(output)}. Nice work! 🚀`);
});
cli.command('init [filename]', 'Create sample resume', {
  alias: 'create'
}).action(async (filename = 'resume.json') => {
  await init(filename);
  console.log(`Done! Start editing ${colorette.yellow(filename)} now, and run the ${colorette.yellow('render')} command when you are ready. 👍`);
});
cli.command('validate [filename]', 'Validate resume').action(async (filename = 'resume.json') => {
  try {
    await validate(filename);
    console.log(`Your ${colorette.yellow(filename)} looks amazing! ✨`);
  } catch (err) {
    if (!Array.isArray(err)) {
      throw err;
    }

    console.log(`Uh-oh! The following errors were found in ${colorette.yellow(filename)}:\n`);
    err.forEach(err => console.log(` ${colorette.red(`❌ ${err.message}`)} at ${colorette.yellow(err.path)}.`));
    process.exitCode = 1;
  }
});

const init = filename => {
  const resume = require('resume-schema/sample.resume.json');

  return fs.promises.writeFile(filename, JSON.stringify(resume, undefined, 2));
};

// Based on https://github.com/prettier/prettier/blob/master/src/common/load-plugins.js

const isDir = async dir => {
  try {
    return (await fs.promises.stat(dir)).isDirectory();
  } catch {
    return false;
  }
};

const findThemesInNodeModules = async (theme = '*', nodeModulesDir) => (await globby__default["default"]([`jsonresume-theme-${theme}/package.json`, `@*/jsonresume-theme-${theme}/package.json`, `@jsonresume/theme-${theme}/package.json`], {
  cwd: nodeModulesDir,
  expandDirectories: false
})).map(path__default["default"].dirname);

const loadThemes = async theme => {
  const themeSearchDir = await escalade__default["default"](process.cwd(), (_dir, names) => names.includes('node_modules') && '.');

  if (!themeSearchDir) {
    throw new Error('node_modules directory not found');
  }

  const nodeModulesDir = path__default["default"].resolve(themeSearchDir, 'node_modules'); // In some fringe cases (e.g. files "mounted" as virtual directories),
  // the isDir(themeSearchDir) check might be false even though node_modules
  // actually exists.

  if (!(await isDir(nodeModulesDir)) && !(await isDir(themeSearchDir))) {
    throw new Error(`${themeSearchDir} does not exist or is not a directory`);
  }

  const themesInfo = (await findThemesInNodeModules(theme, nodeModulesDir)).map(name => ({
    name: name.split('-').pop(),
    path: require.resolve(name, {
      paths: [themeSearchDir]
    })
  }));
  return uniqBy__default["default"](themesInfo, 'path').map(info => ({ ...info,
    module: require(info.path)
  }));
};

const render = (resume, theme) => theme.render(resume);

const schemaValidate = /*#__PURE__*/util.promisify(schema__default["default"].validate);
const validate = async filename => {
  const resume = await fs.promises.readFile(filename, 'utf-8');
  return schemaValidate(JSON.parse(resume));
};

exports.cli = cli;
exports.init = init;
exports.loadThemes = loadThemes;
exports.render = render;
exports.validate = validate;
//# sourceMappingURL=resumed.cjs.development.js.map
